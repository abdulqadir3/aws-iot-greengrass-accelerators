AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: Create Extract, Transform, and Load (ETL) Greengrass accelerator resources and deployment.

Parameters:
  CoreName:
    Description: Green Core name to be created. A "Thing" with be created with _Core appended to the name
    Type: String
    Default: gg_etl_accel
  CertificateArn:
    Description: ARN of the activate AWS IoT certificate
    Type: String

Resources:
  #############################################################################
  # GREENGRASS RESOURCES SECTION
  # This section contains all the Greengrass related resources
  #############################################################################
  GreengrassGroup:
    Type: AWS::Greengrass::Group
    Properties:
      Name: !Ref CoreName
      RoleArn: !GetAtt GreengrassResourceRole.Arn
      InitialVersion:
        CoreDefinitionVersionArn: !Ref GreengrassCoreDefinitionVersion
        FunctionDefinitionVersionArn: !GetAtt FunctionDefinition.LatestVersionArn
        LoggerDefinitionVersionArn: !GetAtt LoggerDefinition.LatestVersionArn
        SubscriptionDefinitionVersionArn: !GetAtt SubscriptionDefinition.LatestVersionArn
  GreengrassCoreDefinition:
    Type: AWS::Greengrass::CoreDefinition
    Properties:
      # use CoreName + "_Core" as "thingName"
      Name: !Join ["_", [!Ref CoreName, "Core"] ]
  GreengrassCoreDefinitionVersion:
    # Example of using GreengrassCoreDefinition referring to this
    # "Version" resource
    Type: AWS::Greengrass::CoreDefinitionVersion
    Properties:
      CoreDefinitionId: !Ref GreengrassCoreDefinition
      Cores:
        - Id: !Join ["_", [!Ref CoreName, "Core"] ]
          ThingArn: !Join
                      - ":"
                      - - "arn:aws:iot"
                        - !Ref AWS::Region
                        - !Ref AWS::AccountId
                        - !Join
                          - "/"
                          - - "thing"
                            - !Join ["_", [!Ref CoreName, "Core"] ]
          CertificateArn: !Ref CertificateArn
          SyncShadow: "false"
  LoggerDefinition:
    Type: 'AWS::Greengrass::LoggerDefinition'
    Properties:
      Name: ETLLoggerDefinition
      InitialVersion:
        Loggers:
          - Id: SystemLogLocal
            Type: FileSystem
            Component: GreengrassSystem
            Level: INFO
            Space: '128'
          - Id: LambdaLogLocal
            Type: FileSystem
            Component: Lambda
            Level: INFO
            Space: '128'
  FunctionDefinition:
    Type: 'AWS::Greengrass::FunctionDefinition'
    Properties:
      Name: FunctionDefinition
      InitialVersion:
        DefaultConfig:
          Execution:
            IsolationMode: NoContainer
        Functions:
          - Id: !Join ["_", [!Ref CoreName, "extract"] ]
            FunctionArn: !Ref ExtractFunction.Version
            FunctionConfiguration:
              Pinned: 'true'
              Executable: extract.py
              Timeout: '300'
              EncodingType: binary
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
          - Id: !Join ["_", [!Ref CoreName, "transform"] ]
            FunctionArn: !Ref TransformFunction.Version
            FunctionConfiguration:
              Pinned: 'true'
              Executable: transform.py
              Timeout: '300'
              EncodingType: binary
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
          - Id: !Join ["_", [!Ref CoreName, "load"] ]
            FunctionArn: !Ref LoadFunction.Version
            FunctionConfiguration:
              Pinned: 'true'
              Executable: load.py
              Timeout: '300'
              EncodingType: binary
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
                  DELIVERY_STREAM: !Ref FirehoseDeliveryStream
  SubscriptionDefinition:
    Type: 'AWS::Greengrass::SubscriptionDefinition'
    Properties:
      Name: SubscriptionDefinition
      InitialVersion:
        # Example of one-to-many subscriptions in single definition version
        Subscriptions:
          - Id: Subscription1
            Source: !Ref LoadFunction.Version
            Subject: !Join
                        - "/"
                        - - !Ref CoreName
                          - "telemetry"
            Target: 'cloud'
          - Id: Subscription2
            Source: !Ref LoadFunction.Version
            Subject: !Join
                        - "/"
                        - - !Ref CoreName
                          - "alert"
            Target: 'cloud'
  ExtractFunction:
    # Extract raw data from source (e.g., CAN Bus device)
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-gg_extract
      AutoPublishAlias: prod
      Description: Long running lambda that performs extract function
      Handler: extract.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      CodeUri: ./lambda_functions/extract
  TransformFunction:
    # Transform messages into human readable JSON
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-gg_transform
      AutoPublishAlias: prod
      Description: Long running lambda that performs transform function
      Handler: transform.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      CodeUri: ./lambda_functions/transform
  LoadFunction:
    # Load messages to AWS services
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-gg_load
      AutoPublishAlias: prod
      Description: Long running lambda that performs load function
      Handler: load.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      CodeUri: ./lambda_functions/load

  #############################################################################
  # SUPPORTING RESOURCES SECTION
  # This section contains all the resources that support the Greengrass
  # section above. It uses custom resources to assist with CloudFormation
  # stack setup and teardown.
  #############################################################################
  IoTThing:
    # Resource creates thing, certificate key pair, IoT policy, and associates all
    Type: Custom::IoTThing
    Properties:
      ServiceToken: !GetAtt CreateThingFunction.Arn
      ThingName: !Join ["_", [!Ref CoreName, "Core"] ]
      CertificateArn: !Ref CertificateArn
  CreateThingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateThingAndPolicy
      Description: Create thing and policy, attach certificate
      Handler: create_thing.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      CodeUri: ./lambda_functions/cr_create_thing

  GroupDeploymentReset:
    # Allows for deletion of Greengrass group if the deployment status is not
    # reset manually via the console or API
    Type: Custom::GroupDeploymentReset
    DependsOn: GreengrassGroup
    Properties:
      ServiceToken: !GetAtt GroupDeploymentResetFunction.Arn
      # Region: !Ref "AWS::Region"
      GroupName: !Ref CoreName
  GroupDeploymentResetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GroupDeployReset
      Description: Resets any deployments during stack delete and manages Greengrass service role needs
      Handler: group_deployment_reset.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          STACK_NAME: !Ref "AWS::StackName"
      CodeUri: ./lambda_functions/cr_group_deployment_reset
  FirehoseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - !Join ["-", [!Ref "AWS::StackName", "firehose-events"] ]
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      # BucketName: !Join ["-", [!Ref "AWS::StackName", "firehose-events"] ]
      AccessControl: Private
  FirehoseDeliveryStream:
    DependsOn:
      - FirehoseDeliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ""
          - - "arn:aws:s3:::"
            - !Ref FirehoseBucket
        BufferingHints:
          IntervalInSeconds: "60"
          SizeInMBs: "1"
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn
  # Roles
  LambdaExecutionRole:
    # Role used by CloudFormation created Lambda functions, used by the custom
    # resource functions to perform their objectives.
    # Overly permissive for iot:* and greengrass:* to reduce Statement complexity
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - iot:*
            Resource: "*"
          - Effect: Allow
            Action:
            - greengrass:*
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2:DescribeReservedInstancesOfferings
            Resource: "*"
          - Effect: Allow
            Action:
            - iam:CreateRole
            - iam:AttachRolePolicy
            - iam:GetRole
            - iam:DeleteRole
            - iam:PassRole
            Resource: !Join ["", ["arn:aws:iam::", !Ref "AWS::AccountId", ":role/greengrass_cfn_", !Ref "AWS::StackName", "_ServiceRole"] ]
  GreengrassResourceRole:
    # Role for deployed Lambda functions to a Greengrass core to call other
    # AWS services directly
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: greengrass.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - iot:*
            Resource: "*"
          - Effect: Allow
            Action:
            - firehose:PutRecord
            - firehose:PutRecordBatch
            - firehose:UpdateDestination
            Resource: !Join ["", ["arn:aws:firehose:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":deliverystream/", !Ref "FirehoseDeliveryStream"] ]
  FirehoseDeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ["_", [!Ref "AWS::StackName", "firehose_policy"] ]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref FirehoseBucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref FirehoseBucket
                  - '*'
      Roles:
        - !Ref FirehoseDeliveryRole
  FirehoseDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
Outputs:
  # Emit values needed for deployment status
  GreengrassConfig:
    Description: "Config file contents (copy and paste into local config.json file and modify"
    Value: !GetAtt IoTThing.configJSON
